{"version":3,"sources":["components/Button/Button.ts","components/Input/Input.ts","components/AddNewTodo/AddNewTodo.tsx","components/CheckBox/CheckBox.ts","components/Todo/Todo.tsx","mst/models.ts","components/TodoList/TodoList.tsx","styles/todoListTheme.ts","App.tsx","index.tsx"],"names":["Button","styled","button","props","theme","borderRadius","colors","main","white","Input","input","error","ErrorText","p","Wrapper","div","observer","addTodo","sendFilterParams","useState","text","setText","setError","type","onChange","e","currentTarget","value","onClick","CheckBox","Title","isDone","text1","title","changeStatus","checked","todoModel","types","model","id","string","boolean","actions","self","rootStore","todos","array","newTodo","Date","toString","unshift","create","RootStoreContext","createContext","Provider","paper","store","useContext","Error","useMst","filterParametr","setFilterParametr","parametr","filter","todo","toUpperCase","indexOf","map","key","todoListTheme","secondary","App","ReactDOM","render","document","getElementById"],"mappings":"ybAGA,IAUeA,EAVAC,IAAOC,OAAV,KAMK,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,gBACxB,SAAAF,GAAK,OAAIA,EAAMC,MAAME,OAAOC,QACjC,SAAAJ,GAAK,OAAIA,EAAMC,MAAME,OAAOE,S,0MCTrC,IAUeC,EAVDR,IAAOS,MAAV,KAIM,SAAAP,GAAK,OAAIA,EAAMC,MAAMC,gBAC5B,SAAAF,GAAK,OAAKA,EAAMQ,MAAQ,gBAAkB,U,gUCApD,IAAMC,EAAYX,IAAOY,EAAV,KAMTC,EAAUb,IAAOc,IAAV,KA0CEC,eA9BmC,SAACb,GAAgC,IAEvEc,EAA8Bd,EAA9Bc,QAASC,EAAqBf,EAArBe,iBAF6D,EAItDC,mBAAS,IAJ6C,mBAIvEC,EAJuE,KAIjEC,EAJiE,OAKpDF,oBAAS,GAL2C,mBAKvER,EALuE,KAKhEW,EALgE,KAuB9E,OAAO,kBAACR,EAAD,KACH,kBAAC,EAAD,CAAOH,MAAOA,EAAOY,KAAK,OAAOC,SAjBjB,SAACC,GACjBH,GAAS,GACTD,EAAQI,EAAEC,cAAcC,OACxBT,EAAiBO,EAAEC,cAAcC,QAcuBA,MAAOP,IAC/D,kBAAC,EAAD,CAAQQ,QAZK,WACRR,GAGDH,EAAQG,GACRC,EAAQ,IACRH,EAAiB,KAJjBI,GAAS,KAUb,OACCX,EAAQ,kBAACC,EAAD,mCAAoD,S,wFCjDrE,IAIeiB,EAJE5B,IAAOS,MAAV,K,uSCGd,IAAMoB,EAAQ7B,IAAOY,EAAV,KAGQ,SAAAV,GAAK,OAAKA,EAAM4B,OAAS,eAAiB,UACpD,SAAA5B,GAAK,OAAIA,EAAMC,MAAME,OAAO0B,SAG/BlB,EAAUb,IAAOc,IAAV,KA2BEC,eAduB,SAACb,GAA0B,IACrD4B,EAAgC5B,EAAhC4B,OAAQE,EAAwB9B,EAAxB8B,MAAOC,EAAiB/B,EAAjB+B,aAMvB,OAAO,kBAAC,EAAD,KACH,kBAACJ,EAAD,CAAOC,OAAQA,GAAWE,GAC1B,kBAAC,EAAD,CAAUV,KAAK,WAAWY,QAASJ,EAAQP,SAN5B,WACfU,W,OC1BFE,EAAYC,IACbC,MAAM,CACHC,GAAIF,IAAMG,OACVP,MAAOI,IAAMG,OACbT,OAAQM,IAAMI,UAEjBC,SAAQ,SAAAC,GAAI,MAAK,CACdT,aADc,WAEVS,EAAKZ,QAAUY,EAAKZ,YAmDnBa,EA9CYP,IACpBC,MAAM,CACHO,MAAOR,IAAMS,MAAMV,KAEtBM,SAAQ,SAAAC,GAAI,MAAK,CACd1B,QADc,SACNgB,GACJ,IAAIc,EAAU,CACVR,IAAI,IAAIS,MAAOC,WACfhB,MAAOA,EACPF,QAAQ,GAEZY,EAAKE,MAAMK,QAAQH,QAKAI,OAAO,CAClCN,MAAO,CACH,CACIN,GAAI,MACJN,MAAO,YACPF,QAAQ,GACT,CACCQ,GAAI,OACJN,MAAO,YACPF,QAAQ,GACT,CACCQ,GAAI,OACJN,MAAO,YACPF,QAAQ,GACT,CACCQ,GAAI,OACJN,MAAO,YACPF,QAAQ,GACT,CACCQ,GAAI,OACJN,MAAO,cACPF,QAAQ,MAWdqB,EAAmBC,wBAAmC,MAE/CC,EAAWF,EAAiBE,S,wKC3DzC,IAAMxC,EAAUb,IAAOc,IAAV,KAIE,SAAAZ,GAAK,OAAIA,EAAMC,MAAME,OAAOiD,SAC1B,SAAApD,GAAK,OAAIA,EAAMC,MAAMC,gBAmBvBW,eAb+B,WAAO,IAAD,EDkD7C,WACH,IAAMwC,EAAQC,qBAAWL,GACzB,GAAc,OAAVI,EACA,MAAM,IAAIE,MAAM,uDAEpB,OAAOF,ECtDoBG,GAAnBd,EADwC,EACxCA,MAAO5B,EADiC,EACjCA,QADiC,EAGJE,mBAAS,IAHL,mBAGzCyC,EAHyC,KAGzBC,EAHyB,KAQhD,OAAO,kBAAC,EAAD,KACH,kBAAC,EAAD,CAAY5C,QAASA,EAASC,iBAJT,SAAC4C,GACtBD,EAAkBC,MAIjBjB,EAAMkB,QAAO,SAAAC,GAAI,OAAIA,EAAK/B,MAAMgC,cAAcC,QAAQN,EAAeK,gBAAkB,KAAGE,KAAI,SAAAH,GAAI,OAAI,kBAAC,EAAD,eAAMI,IAAKJ,EAAKzB,IAAQyB,EAAxB,CAA8B9B,aAAc8B,EAAK9B,uBC1B1JmC,EAA8B,CAClChE,aAAc,MACdC,OAAQ,CACNC,KAAM,OACN+D,UAAW,YACX3D,MAAO,MACP4C,MAAO,aACP/C,MAAO,QACPwB,MAAO,kB,0MCJX,IAAMlB,EAAUb,IAAOc,IAAV,KAyBEwD,MAdf,WACE,OAEE,kBAACjB,EAAD,CAAU3B,MAAOiB,GACd,kBAAC,IAAD,CAAexC,MAAOiE,GACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,UCjBNG,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.0b63abf0.chunk.js","sourcesContent":["\r\nimport styled from 'styled-components'\r\n\r\nconst Button = styled.button`\r\ndisplay: block;\r\nfont-size: 16px;\r\npadding: 4px 16px;\r\noutline: none;\r\nborder: none;\r\nborder-radius: ${props => props.theme.borderRadius};\r\nbackground: ${props => props.theme.colors.main};\r\ncolor: ${props => props.theme.colors.white}\r\n`\r\nexport default Button","import styled from 'styled-components'\r\n\r\nconst Input = styled.input<{ error: boolean }>`\r\ndisplay: block;\r\npadding: 4px 12px;\r\noutline: none;\r\nborder-radius: ${props => props.theme.borderRadius};\r\nborder: ${props => (props.error ? '2px solid red' : 'none')};\r\nmargin-right: 16px;\r\nbackground: #D3D3D3;\r\n`\r\n\r\nexport default Input","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Button from '../Button/Button'\r\nimport Input from '../Input/Input'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { ChangeEvent } from 'react'\r\n\r\nconst ErrorText = styled.p`\r\nfont-size: 10px;\r\ncolor: red;\r\nposition:absolute;\r\nbottom: -10px;\r\n`\r\nconst Wrapper = styled.div`\r\ndisplay: flex;\r\nposition: relative;\r\npadding-bottom: 16px;\r\nmargin:0;\r\njustify-content: space-between;\r\n`\r\n\r\ntype AddNewTodoPropsType = {\r\n    addTodo: (text: string) => void\r\n    sendFilterParams: (text: string) => void\r\n}\r\nconst AddNewTodo: React.FC<AddNewTodoPropsType> = (props: AddNewTodoPropsType) => {\r\n\r\n    const { addTodo, sendFilterParams } = props\r\n\r\n    const [text, setText] = useState('')\r\n    const [error, setError] = useState(false)\r\n\r\n    const changeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setText(e.currentTarget.value)\r\n        sendFilterParams(e.currentTarget.value)\r\n    }\r\n\r\n    const sendText = () => {\r\n        if (!text) {\r\n            setError(true)\r\n        } else {\r\n            addTodo(text)\r\n            setText('')\r\n            sendFilterParams('')\r\n        }\r\n    }\r\n\r\n    return <Wrapper>\r\n        <Input error={error} type='text' onChange={changeInput} value={text} />\r\n        <Button onClick={sendText}>Add</Button>\r\n        {error ? <ErrorText>The field cannot be empty!</ErrorText> : null}\r\n    </Wrapper>\r\n}\r\n\r\nexport default observer(AddNewTodo)","import styled from 'styled-components'\r\n\r\nconst CheckBox = styled.input`\r\ndisplay :block;\r\n`\r\n\r\nexport default CheckBox","import React from 'react'\r\nimport { observer } from \"mobx-react-lite\"\r\nimport styled from 'styled-components'\r\nimport CheckBox from '../CheckBox/CheckBox'\r\n\r\nconst Title = styled.p<{ isDone: boolean }>`\r\nfont-size: 16px;\r\nmargin: 0;\r\ntext-decoration: ${props => (props.isDone ? 'line-through' : 'none')}; \r\ncolor: ${props => props.theme.colors.text1};\r\n`\r\n\r\nconst Wrapper = styled.div`\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: space-between;\r\npadding: 8px;\r\n`\r\n\r\ntype TodoPropsType = {\r\n    isDone: boolean\r\n    title: string\r\n    changeStatus: () => void\r\n}\r\n\r\nconst Todo: React.FC<TodoPropsType> = (props: TodoPropsType) => {\r\n    const { isDone, title, changeStatus } = props\r\n\r\n    const sendStatus = () => {\r\n        changeStatus()\r\n    }\r\n\r\n    return <Wrapper>\r\n        <Title isDone={isDone}  >{title}</Title>\r\n        <CheckBox type='checkBox' checked={isDone} onChange={sendStatus} />\r\n    </Wrapper>\r\n}\r\n\r\n\r\nexport default observer(Todo)","import { Instance, types } from 'mobx-state-tree'\r\nimport { createContext, useContext } from 'react'\r\n\r\nconst todoModel = types\r\n    .model({\r\n        id: types.string,\r\n        title: types.string,\r\n        isDone: types.boolean\r\n    })\r\n    .actions(self => ({\r\n        changeStatus() {\r\n            self.isDone = !self.isDone\r\n        }\r\n    }))\r\n\r\n\r\nexport const RootModel = types\r\n    .model({\r\n        todos: types.array(todoModel)\r\n    })\r\n    .actions(self => ({\r\n        addTodo(title: string) {\r\n            let newTodo = {\r\n                id: new Date().toString(),\r\n                title: title,\r\n                isDone: false\r\n            }\r\n            self.todos.unshift(newTodo)\r\n        }\r\n    })\r\n    )\r\n\r\nconst initialState = RootModel.create({\r\n    todos: [\r\n        {\r\n            id: '123',\r\n            title: 'Todsggdo1',\r\n            isDone: false\r\n        }, {\r\n            id: '1234',\r\n            title: 'Toddgdgo2',\r\n            isDone: false\r\n        }, {\r\n            id: '1235',\r\n            title: 'Todgdgdo3',\r\n            isDone: false\r\n        }, {\r\n            id: '1236',\r\n            title: 'Toddgdgo4',\r\n            isDone: false\r\n        }, {\r\n            id: '1237',\r\n            title: 'Todgdsggho5',\r\n            isDone: false\r\n        }\r\n    ]\r\n})\r\n\r\nexport type RootInstance = Instance<typeof RootModel>\r\n\r\nexport type Todo = Instance<typeof todoModel>\r\n\r\nexport const rootStore = initialState\r\n\r\nconst RootStoreContext = createContext<null | RootInstance>(null);\r\n\r\nexport const Provider = RootStoreContext.Provider;\r\n\r\nexport function useMst() {\r\n    const store = useContext(RootStoreContext);\r\n    if (store === null) {\r\n        throw new Error(\"Store cannot be null, please add a context provider\");\r\n    }\r\n    return store;\r\n}","import React, { useState } from \"react\"\r\nimport AddNewTodo from \"../AddNewTodo/AddNewTodo\"\r\nimport Todo from '../Todo/Todo'\r\nimport { observer } from \"mobx-react-lite\"\r\nimport { useMst } from \"../../mst/models\"\r\nimport styled from 'styled-components'\r\n\r\nconst Wrapper = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\npadding: 16px;\r\nbackground:  ${props => props.theme.colors.paper};\r\nborder-radius: ${props => props.theme.borderRadius};\r\n`\r\n\r\ntype TodoListPropsType = {\r\n}\r\n\r\nconst TodoList: React.FC<TodoListPropsType> = () => {\r\n    const { todos, addTodo } = useMst()\r\n\r\n    const [filterParametr, setFilterParametr] = useState('')\r\n\r\n    const sendFilterParams = (parametr: string) => {\r\n        setFilterParametr(parametr)\r\n    }\r\n    return <Wrapper>\r\n        <AddNewTodo addTodo={addTodo} sendFilterParams={sendFilterParams} />\r\n        {todos.filter(todo => todo.title.toUpperCase().indexOf(filterParametr.toUpperCase()) > -1).map(todo => <Todo key={todo.id} {...todo} changeStatus={todo.changeStatus} />)}\r\n    </Wrapper>\r\n}\r\nexport default observer(TodoList)","import { DefaultTheme } from 'styled-components'\r\n\r\nconst todoListTheme: DefaultTheme = {\r\n  borderRadius: '3px',\r\n  colors: {\r\n    main: 'Blue',\r\n    secondary: 'Gainsboro',\r\n    error: 'Red',\r\n    paper: 'WhiteSmoke',\r\n    white: 'White',\r\n    text1: 'DarkSlateGrey'\r\n  },\r\n}\r\n\r\nexport { todoListTheme }","import React from 'react';\nimport TodoList from './components/TodoList/TodoList';\nimport { Provider, rootStore } from './mst/models';\nimport styled, { ThemeProvider } from 'styled-components'\nimport { todoListTheme } from './styles/todoListTheme';\n\nconst Wrapper = styled.div`\nheight: 100vh;\nwidth: 100%;\ndisplay: flex;\njustify-content: center;\nalign-items: start;\npadding: 60px;\nbackground: #DCDCDC;\n`\n\n\nfunction App() {\n  return (\n    \n    <Provider value={rootStore}>\n       <ThemeProvider theme={todoListTheme}>\n    <Wrapper>\n      <TodoList />\n      \n    </Wrapper>\n    </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}